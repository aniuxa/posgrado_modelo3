---
title: "Práctica 1"
author: "Ana Escoto"
date: "1/9/2022"
output:
#   html_document:
#     toc: true
#     toc_float:
#       collapsed: false
#       smooth_scroll: false
  # github_document:
  #   toc: true
  #   toc_depth: 2
  pdf_document:
    latex_engine: xelatex
---
\newpage 
\tableofcontents 
\newpage

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Paquetes

```{r}
if (!require("pacman")) install.packages("pacman")#instala pacman si se requiere
pacman::p_load(tidyverse,
               readxl,
               writexl, 
               haven,
               sjlabelled, 
               janitor,
               infer, 
               ggpubr,
               magrittr,
               gt,
               GGally)
```


# Cargando los datos

Desde STATA
```{r}
ags_t321 <- haven::read_dta("./datos/AGS_SDEMT321.dta", encoding="latin1")

```

Desde Excel:

```{r}
ICI_2021 <- readxl::read_excel("./datos/ICI_2021.xlsx",
                               sheet = "para_importar")

```

# Un poquito de *dplyr* y limpieza

## Primero, los pipes

R utiliza dos pipes el nativo "|>" y el pipe que está en *dplyr* "%>%". Algunas de las diferencias las puedes checar acá <https://eliocamp.github.io/codigo-r/2021/05/r-pipa-nativa/>

En estas prácticas utilizaremos el segundo, pero son muy parecidos y para que esta instructora recicle algunos de sus códigos viejos. Pero funcionan igual:

```{r}
ags_t321 |> #pipe nativo, no necesita instalación
  head()
```


```{r}
ags_t321  %>%  #pipe de dplyr, necesita instalación de dplyr en tidyverse
  head()
```
## Limpieza de nombres

Este paso también nos permitirá enseñar otro pipe que está en el paquete  *magrittr*.

Los nombres de una base de datos son los nombres de las columnas. 

```{r}
names(ags_t321)
names(ICI_2021)
```

Como vemos en las bases hay mayúsculas, caracteres especiales y demás. Esto lo podemos cambiar

```{r}
ICI_2021<-ICI_2021 %>% 
  janitor::clean_names()

names(ICI_2021)
```

Si quisiéramos que la acción quedará de un solo, podemos usar un pipe diferente:

```{r}
ags_t321 %<>% 
  clean_names()

names(ags_t321)
```

Más de otros *pipes* <https://r4ds.had.co.nz/pipes.html>

## *select()* y *filter()*

Este es un recordatorio de que en dplyr, se filtran CASOS, es decir, líneas o renglones, y se seleccionan VARIABLES. 

Por ejemplo:

```{r}
ags_t321 %>% 
  dplyr::select(sex, eda) %>% 
  dplyr::filter(eda>11)
```
En la documentación de la base de datos de la ENOE se nos señala que debemos quedarnos con quienes tienen entrevista completa "r_def==0" y con quiénes son habitante habituales ("c_res!=2")

Hagamos estos cambios:

```{r}
ags_t321 %<>%
  filter(r_def==0) %>% 
  filter(!c_res==2)
```


# Tabulados

## Tabulados con tabyl()

El comando tabyl del paquete janirot nos sirve para hacer tabulados. Para que sean más bonitas, necesitaremos cambiar algunas de nuestras variables a sus datos etiquetados

```{r}
ags_t321 %>%
  dplyr::mutate(sex=sjlabelled::as_label(sex))  %>%
  janitor::tabyl(sex)
```

Para ver que esto es una distribución de frecuencias sería muy útil ver la proporción total, ello se realiza agregando un elemento más en nuestro código con una "tubería":
```{r}
ags_t321 %>%
  mutate(sex=as_label(sex)) %>% 
  tabyl(sex) %>%
  adorn_totals() #primer enchulamiento
```

Ahora, las proporciones son raras, y preferimos por los porcentajes.

```{r}
ags_t321 %>%
  mutate(sex=as_label(sex)) %>% # cambia los valores de la variable a sus etiquetas
  tabyl(sex) %>% # para hacer la tabla
  adorn_totals() %>% # añade totales
  adorn_pct_formatting()  # nos da porcentaje en lugar de proporción
                
```

Vamos a darle una "ojeada" a esta variable
```{r}
glimpse(ags_t321$niv_ins)
```


Hoy hacemos la tabla, con las etiquetas:

```{r}
ags_t321 %>%
  mutate(niv_ins=as_label(niv_ins)) %>% #esto sólo si hay etiquetas declaradas, recuerda
                tabyl(niv_ins)
```

Para que no nos salgan las categorías sin datos podemos poner una opción dentro del comando "tabyl()"

```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% 
  tabyl(niv_ins, 
        show_missing_levels=F ) %>% # esta opción elimina los valores con 0
  adorn_totals()  
```


### Cálculo de frecuencias

Las tablas de doble entrada tiene su nombre porque en las columnas entran los valores de una variable categórica, y en las filas de una segunda. Basicamente es como hacer un conteo de todas las combinaciones posibles entre los valores de una variable con la otra. 

Por ejemplo, si quisiéramos combinar las dos variables que ya estudiamos lo podemos hacer, con una tabla de doble entrada:

```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí
  adorn_totals()  
```

Observamos que en cada celda confluyen los casos que comparten las mismas características:

```{r}
ags_t321 %>%   
    count(niv_ins==1 & sex==1) # nos da la segunda celda de la izquierda

```

### Totales y porcentajes

De esta manera se colocan todos los datos. Si observa al poner la función "adorn_totals()" lo agregó como una nueva fila de totales, pero también podemos pedirle que agregue una columna de totales. 


```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sex
  adorn_totals("col")  
```

O bien agregar los dos, introduciendo en el argumento "c("col", "row")" un vector de caracteres de las dos opciones requeridas:

```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sexo
  adorn_totals(c("col", "row")) 
```

Del mismo modo, podemos calcular los porcentajes. Pero los podemos calcular de tres formas. Uno es que lo calculemos para los totales calculados para las filas, para las columnas o para el gran total poblacional. 

Para columnas tenemos el siguiente código y los siguientes resultados:
```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sexo
  adorn_totals(c("col", "row")) %>% 
  adorn_percentages("col") %>% # Divide los valores entre el total de la columna
  adorn_pct_formatting() # lo vuelve porcentaje
```

Cuando se hagan cuadros de distribuciones (que todas sus partes suman 100), los porcentajes pueden ser una gran ayuda para la interpretación, sobre todos cuando se comparar poblaciones de categorías de diferente tamaño. Por lo general, queremos que los cuadros nos den información de donde están los totales y su 100%, de esta manera el lector se puede guiar de porcentaje con respecto a qué está leyendo. En este caso, vemos que el 100% es común en la última fila. 

Veamos la diferencia de cómo podemos leer la misma celda, pero hoy, hemos calculado los porcentajes a nivel de fila:
```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% 
  adorn_totals(c("col", "row")) %>% 
  adorn_percentages("row") %>% # Divide los valores entre el total de la fila
  adorn_pct_formatting() # lo vuelve porcentaje
```


Finalmente, podemos calcular los porcentajes con referencia a la población total en análisis. Es decir la celda en la esquina inferior derecha de nuestra tabla original.

```{r}
ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sexo
  adorn_totals(c("col", "row")) %>% 
   adorn_percentages("all") %>% # Divide los valores entre el total de la población
  adorn_pct_formatting() # lo vuelve porcentaje
```

## *Grammar of tables: gt*
Es un paquete que nos permite poner nuestras tablas en mejores formatos. 

Guardemos un ejemplo anterior en un objeto
```{r}
mi_tabla<-ags_t321 %>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sexo
  adorn_totals(c("col", "row")) %>% 
   adorn_percentages("all") %>% # Divide los valores entre el total de la población
  adorn_pct_formatting() # lo vuelve porcentaje
```

Veamos qué pasa con el comando "gt"

```{r}
gt_tabla<-gt(mi_tabla)
gt_tabla
```

Con este formato será bastante sencillo agregar títulos y demás:

```{r}
gt_tabla<-gt_tabla %>%
  tab_header(
    title = "Distribución del sexo de la población según nivel de escolaridad",
    subtitle = "Aguascalientes, trimestre III de 2021"
  )

gt_tabla
```

Agreguemos la fuente a nuestra tabla:

```{r}
gt_tabla<-gt_tabla %>%
  tab_source_note(
    source_note = "Fuente: Cálculos propios con datos de INEGI"
  )

gt_tabla
```


Checa más de este paquete por aquí <https://gt.rstudio.com/articles/intro-creating-gt-tables.html>

# Descriptivos para variables cuantitativas
Vamos a empezar a revisar los gráficos para variables cuantitativas.

## Medidas numéricas básicas
5 números

```{r}
summary(ags_t321$ing_x_hrs) ## ingreso por horas 
```

Con pipes se pueden crear "indicadores" de nuestras variables es un tibble
```{r}
ags_t321 %>% 
  summarise(nombre_indicador=mean(ing_x_hrs, na.rm=T))
```

