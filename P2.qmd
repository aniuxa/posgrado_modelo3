# Repaso de `{ggplot2}` e introducción a la inferencia.

## Paquetes

```{r}
if (!require("pacman")) install.packages("pacman")#instala pacman si se requiere
pacman::p_load(tidyverse,
               readxl,
               writexl, 
               haven,
               sjlabelled, 
               janitor,
               infer, 
               ggpubr,
               magrittr,
               gt,
               GGally,
               broom,
               DescTools,
               wesanderson)
```

## Cargando los datos

Desde STATA

```{r}
tlaxt322 <- read_dta("./datos/tlaxt322.dta") %>% 
  clean_names()

```

Desde Excel:

```{r}
ICI_2021 <- read_excel("./datos/ICI_2021.xlsx",
                               sheet = "para_importar") %>% 
  clean_names()

```

```{r}
tlaxt322 %<>%
  filter(r_def==0) %>% 
  filter(!c_res==2)
```

## *Grammar of tables: gt*

Es un paquete que nos permite poner nuestras tablas en mejores formatos.

Guardemos un ejemplo anterior en un objeto

```{r}
mi_tabla<-tlaxt322%>% 
  mutate(niv_ins=as_label(niv_ins)) %>% # para que las lea como factor
  mutate(sex=as_label(sex)) %>% # para que las lea como factor
  tabyl(niv_ins, sex, show_missing_levels=F ) %>% # incluimos aquí sexo
  adorn_totals(c("col", "row")) %>% 
   adorn_percentages("all") %>% # Divide los valores entre el total de la población
  adorn_pct_formatting() # lo vuelve porcentaje
```

Veamos qué pasa con el comando "gt"

```{r}
gt_tabla<-gt(mi_tabla)
gt_tabla
```

Con este formato será bastante sencillo agregar títulos y demás:

```{r}
gt_tabla<-gt_tabla %>%
  tab_header(
    title = "Distribución del sexo de la población según nivel de escolaridad",
    subtitle = "Tlaxcala, trimestre III de 2022"
  )

gt_tabla
```

Agreguemos la fuente a nuestra tabla:

```{r}
gt_tabla<-gt_tabla %>%
  tab_source_note(
    source_note = "Fuente: Cálculos propios con datos de INEGI"
  )

gt_tabla
```

Checa más de este paquete por aquí <https://gt.rstudio.com/articles/intro-creating-gt-tables.html>

## Descriptivos para variables cuantitativas

Vamos a empezar a revisar los gráficos para variables cuantitativas.

### Medidas numéricas básicas

5 números

```{r}
summary(tlaxt322$ing_x_hrs) ## ingreso por horas 
```

Con pipes se pueden crear "indicadores" de nuestras variables es un tibble

```{r}
tlaxt322%>% 
  summarise(nombre_indicador=mean(ing_x_hrs, na.rm=T))
```

## Visualización de datos, un pequeño disclaimer

Hay cursos específicos de visualización de datos. Es maravilloso pero también requiere que estudiemos bien qué tipo de datos tenemos y cuáles son nuestros objetivos.

Me gusta mucho este recurso: <https://www.data-to-viz.com/>

### Gráficos de base

"plot()" Es la función más simple.

```{r}
  plot(as_label(tlaxt322$niv_ins))
```

Esto es igual que:

```{r}
barplot(table(as_label(tlaxt322$niv_ins)))
```

Histograma y el boxplot

```{r}
hist(ICI_2021$esperanza_de_vida)
```

```{r}
boxplot(ICI_2021$esperanza_de_vida)
```

## *Grammar of graphics: ggplot*

Hoy vamos a presentar a un gran paquete ¡Es de los famosos! Y tiene más de diez años.

-   <https://qz.com/1007328/all-hail-ggplot2-the-code-powering-all-those-excellent-charts-is-10-years-old/>

"gg" proviene de "Grammar of Graphics", funciona un poco como sintácticamente, de ahí su nombre.

Algunos recursos para aprender ggplot

-   <https://ggplot2-book.org/> hecha por el mero mero.

-   <http://sape.inf.usi.ch/quick-reference/ggplot2>

-   <https://raw.githubusercontent.com/rstudio/cheatsheets/master/data-visualization-2.1.pdf>

Vamos a revisar una presentación que es muy interesante

-   <https://evamaerey.github.io/ggplot2_grammar_guide/ggplot2_grammar_guide.html>

-   <https://huygens.science.uva.nl/ggPlotteR/> Hace gráficos de ggplot con la base de datos de Gapminder

## Un lienzo para dibujar

Para hacer un gráfico, ggplot2 tiene el comando "ggplot()". Hacer gráficos con esta función tiene una lógica aditiva. Lo ideal es que iniciemos estableciendo el mapeo estético de nuestro gráfico, con el comando aes()

```{r}
g1<-tlaxt322 %>%
  ggplot(aes(as_label(niv_ins)))

g1 ## imprime el lienzo
```

## Gráficos univariados

### Para cualitativas

```{r}
g1 + geom_bar()
```

```{r}
g1 +  geom_bar(aes(
  fill = as_label(niv_ins)
  )) ## colorea la geometría

## Esto es equivalente

tlaxt322 %>%
  ggplot(aes(as_label(niv_ins),
             fill = as_label(niv_ins)
             )
         ) + geom_bar()

```

### Para variables cuantitativas

Podemos hacer histogramas y gráficos de densidad, de manera fácil. La idea es agregar en nuestro "lienzo" una geometría, un valor para dibujar en él. Esto se agrega con un "+" y con la figura que se añadirá a nuestro gráfico.

```{r}
g2<-tlaxt322 %>%
  ggplot(aes(eda))

g2 ## imprime el lienzo
```

#### Histograma

```{r}
g2 + geom_histogram() 
```

### Intro a dos variables

Vamos a terminar con un código que resume mucho de lo que hemos visto hoy:

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>%  ## nos quedamos sólo con los ocupados
  select(eda, ing_x_hrs, anios_esc) %>% 
  GGally::ggpairs()
```

## Introducción a la inferencia

### Hipótesis e intervalos de confianza

#### t-test

Este comando nos sirve para calcular diferentes tipos de test, que tienen como base la distribución t

<b>Univariado para estimación</b>

```{r}
t.test(tlaxt322$ing_x_hrs) ## pero no tenemos los filtro
```

Un truco para poder utilizar funciones de base con formato *tidy*

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
    t.test(ing_x_hrs)
  )
```

Vamos a quedarnos a con esta población objetivo:

<b>Univariado para hipótesis específica</b>

$$ H_o:\mu=40 $$ $$ H_{a1}: \mu < 40 $$ $$ H_{a2}: \mu \neq 40 $$ $$ H_{a3}: \mu > 40 $$ Si hacemos explícita la $H_0$

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
    t.test(tlaxt322$ing_x_hrs, mu=40)
    )
```

Para hacer explícitas las hipótesis alternativas

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
  t.test(tlaxt322$ing_x_hrs, mu=40, alternative = "two.sided") #default y de dos colas
    )
```

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
  t.test(tlaxt322$ing_x_hrs, mu=40, alternative = "greater") ## cola derecha
    )
```

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
  t.test(tlaxt322$ing_x_hrs, mu=40, alternative = "less") ## cola izquierda
    )
```

#### Enchulando un poquito

Los resultados tienen la info, pero la podemos almacenar en un objeto. Con los cálculos de modelos es muy útil guardarlos para compararlos.

```{r}
t.test0<-tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  with(
    t.test(tlaxt322$ing_x_hrs, mu=40)
    )
```

Veamos si lo imprimimos

```{r}
t.test0
```

```{r}
broom::tidy(t.test0)
```

La función "tidy()" hace que el resultado se vuelva un "tibble", una tabla muy compatible con el tidyverse. Esto puede ser útil cuando queremos ir comparando estimaciones.

Anteriormente vimos con base cómo hacer inferencia. El paquete "infer" tiene también elementos para inferencia, pero en formato más compatible con tidyverse.

```{r}
tlaxt322 %>% 
  filter(clase2==1) %>% #Filtro de ocupados
  filter(ing_x_hrs>0) %>% #Filtros de quienes reportaron ingresos
  infer::t_test(response = ing_x_hrs, mu = 40)

```

Como vemos nos da el mismo resultado anterior, pero nos da directamente el resultado en formato tidy.

Si solo queremos el estimador de "t"

```{r}
tlaxt322 %>% 
t_stat(response = ing_x_hrs, mu = 40)

```

Más de este paquete <https://infer.netlify.app/>

### Proporción

Vamos a revisar la proporción de hombres y mujeres en términos de participación laboral.

El comando de base es menos flexible:

```{r}
prop<-table(tlaxt322[tlaxt322$clase1>0,]$clase1)
prop.test(prop)
```

Los filtros se complican un poco...

```{r}
tlaxt322 %>% 
  filter(eda>14 & eda<99) %>% 
  mutate(clase1=as_label(clase1)) %>% #oo
  tabyl(clase1)
```

Vamos a aprovechar para re-etiquetar la variable clase1

```{r}
etiqueta_pea<-c("PEA", "PNEA") ## un vector con las etiquetas
```

```{r}
tlaxt322 %>% 
  filter(eda>14 & eda<99) %>% 
  sjlabelled::set_labels(clase1, labels=etiqueta_pea) %>% 
  mutate(clase1=as_label(clase1)) %>% 
  tabyl(clase1)

```

En formato tidy

```{r}

tlaxt322 %>% 
  filter(eda>14 & eda<99) %>% 
  with(
    table(clase1)
    ) %>% 
  prop.test()

```

En base necesita que se alimente de un objeto tipo table, el cual es menos manejable. Por eso utilizaremos más el paquete *infer*

```{r}
tlaxt322 %>% 
  filter(eda>14 & eda<99) %>% 
  set_labels(clase1, labels=etiqueta_pea) %>% 
  mutate(clase1=as_label(clase1)) %>%   
  infer::prop_test(clase1 ~ NULL  ,
             p=0.7, 
            alternative="less")


## Para que nos dé Z
tlaxt322 %>% 
  filter(eda>14 & eda<99) %>% 
  set_labels(clase1, labels=etiqueta_pea) %>% 
  mutate(clase1=as_label(clase1)) %>%   
  infer::prop_test(clase1 ~ NULL  ,
            p=0.7, 
            alternative="less",
            success = "PEA", ## necesitamos establecer el éxito
            z=TRUE)

```
